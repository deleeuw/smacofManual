---
title: |
    | Smacof at 50: Part xx
    | Utilities
author: 
    - name: Jan de Leeuw
      orcid: 0000-0003-1420-1797
      email: jan@deleeuwpdx.net
      affiliation: 
        - name: University of California Los Angeles
          city: Los Angeles
          state: CA
          url: www.ucla.edu
      license: "CC0"
date: last-modified
date-format: long
bibliography: [mypubs.bib, total.bib]
number-sections: true
pdf-engine: lualatex
keep-tex: true
format:
   pdf:
    fontsize: 12pt
    include-in-header: 
     - preamble.tex
    keep-tex: true
    link-citations: true
    documentclass: scrartcl
    number-sections: true
   html:
    fontsize: 12pt
    keep-md: true
    number-sections: true
toc: true
toc-depth: 3
editor: source
papersize: letter
graphics: true
link-citations: true
mainfont: Times New Roman
---

```{r loadpackages, echo = FALSE}
suppressPackageStartupMessages(library(knitr, quietly = TRUE))
suppressPackageStartupMessages(library(tinytex, quietly = TRUE))
```

**Note:** This is a working manuscript which will be expanded/updated
frequently. All suggestions for improvement are welcome. All Rmd, tex,
html, pdf, R, and C files are in the public domain. Attribution will be
appreciated, but is not required. The files can be found at
<https://github.com/deleeuw> in the repositories smacofCode, smacofManual,
and smacofExamples.

\sectionbreak

# Simultaneous Iteration {#sec-simit}

The problem in this section is to maximize
$$
\lambda(K):=\text{tr}\ K'AK
$${#eq-lbddef}
over all $n\times p$ orthonormal $K$. Suppose for the time being that $A$ is positive semi-definite. 

Define
$k=\text{vec}(K)$ and 
$$
A_p:=\underbrace{A\oplus\cdots\oplus A}_{p \text{times}}
$${#eq-apdef}
Then $\lambda=k'A_pk$, which shows that $\lambda$ i/s convex, and that consequently for 
all $k$ and $\tilde k$ we have the minorization
$$
k'A_pk\geq \tilde k'A_p\tilde k+2\tilde k'A_p(k-\tilde k)=2k'A_p\tilde k-\tilde k'A_p\tilde k
$${#eq-kmaj}
It follows that we increase $\lambda$ by increasing $\text{tr}\ K'A\tilde K$
over $K'K=I$. 
$$
K^{(\nu+1)}=\mathop{\text{argmax}}_{K'K=I}\text{tr}\ K'AK^{(\nu)}
$${#eq-kupd}
Computing K^{(\nu+1)} is an orthoginal Procrustus problem (@gower_dijksterhuis_04).
Thus from the singular value decomposition  $AK^{(\nu)}=P\Phi Q'$ we find
$K^{(\nu+1)}=PQ'$.

There are two remaining elaborations of this result. First, we want to get rid of the
assumption that $A$ is positive semi-definite. We do this by adding a constant to the diagonal of $A$. To compute a suitable constant $\mu$, use the
fact that a diagonally dominant symmetric matrix with a non-negative diagonal is
positive semidefinite. Thus if
$$
\mu\geq\max_i\sum_{j\not= i}|a_{ij}|-a_{ii}
$${#eq-mubnd}
for all $i$ then the matrix $\overline{A}:=A+\mu I$ is positive semi-definite. We now use @eq-kupd
with the adjusted $\overline{A}$ and after convergence we subtract
$p\mu$ from $\lambda$.

Second, instead of computing the singular value decomposition to update $K$ in each iteration we can use the $Q$ from the less expensive QR decomposition. The argument is the same  as in @gifi_B_90 (page 98-99, page 171). The QR update of $K$ is a rotation of the
Procrustus update of $K$, and it consequently gives the same value of $\lambda$
from @eq-lbddef.

\sectionbreak

# Symmetric Matrix Approximation {#sec-symmat}

The problem in this section is to minimize
$$
\sigma(X)=\text{tr}\ (C-XX')^2
$${#eq-eydef}
over all $n\times p$ matrices $X$. The solution is well-known (@eckart_young_36, @keller_62). If $C=K\Lambda K'$ is the eigen-decomposition of $C$, with eigenvalues
in non-increasing order on the diagonal of $\Lambda$, then define $\overline{\Lambda}$
with elements $\max(0,\lambda_s)$. Then use the $p$ largest eigenvalues and corresponding vectors to compute $X=K_p\overline{\Lambda}_p$. Note that $\text{rank}(X)$ is less than
$p$ if $C$ has fewer than $p$ positive eigenvalues.

Our algorithm to minimize, or at least decrease, the loss function in @eq-eydef. Uses
a combination of alternating least squares (@deleeuw_C_94c) and majorization (@deleeuw_C_94c) or MM (@lange_16). We first rewrite  @eq-eydef as
$$
\sigma(K,\Lambda)=\text{tr}\ (C-K\Lambda K')^2
$${#eq-eydefkl}
with must be minimized over all $n\times p$ matrices $K$ with $K'K=I$ and over all
non-negative diagonal $\Lambda$. Again, for the time being, suppose $C$ is
positive semi-definite.

Now clearly
$$
\sigma(K,\Lambda)=\text{tr}\ C^2-2\text{tr}\ K'CK\Lambda+\text{tr}\ \Lambda^2.
$${#eq-eydefklexp}
The minimum over $\Lambda$ for given $C$ has $\lambda_s=\max(0,k_s'Ck_s)$. For the
minimum over $K$ for given $\Lambda$ we define, similar what we did in @sec-simit,
$$
C_p:=\lambda_1 C\oplus\cdots\oplus\lambda_pC
$${#eq-cpdef}
and $k:=\text{vec}(K)$. Then, by the same reasoning as in @sec-simit, we arrive at
$$
K^{(\nu+1)}=\mathop{\text{argmax}}_{K'K=I}\text{tr}\ K'CK^{(\nu)}\Lambda,
$${#eq-kupdc}
which is a Procrustus problem for the matrix $CK^{(\nu)}\Lambda$.

As in simiar situations we now have the option to iterate $eq-kupdc multiple times before
updating $\Lambda$ again.

\sectionbreak

# References
